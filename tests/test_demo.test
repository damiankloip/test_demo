<?php

/**
 * Web tests for test_demo module.
 */

class TestDemoWebTest extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Test demo web tests',
      'description' => 'Web tests for the test_demo module',
      'group' => 'Demo',
    );
  }

  public function setUp() {
    parent::setUp('test_demo');

  }

  /**
   * Tests the test_demo_access page/form.
   */
  public function testTestDemoAccessForm() {
    // Should return OK.
    $this->drupalGet('test_demo_access/yes');
    // It is always good to test the actual response code, as just a drupalGet
    // could pass, returning valid HTML, but for an access denied page for example.
    $this->assertResponse(200);

    // Text/markup.
    // Assert text (as you would see in the browser).
    $this->assertText('Access: yes');
    // Assert raw HTML output from the page.
    $this->assertRaw('<h1 id="test-demo-title">Access: yes</h1>', 'Raw h1 title markup found.');
    // Assert by using xpath queries.
    $elements = $this->xpath('//h1[@id="test-demo-title"]');
    $this->assertEqual(count($elements), 1, 'The title was found by xpath.');

    // Links.
    // Assert by the link title.
    $this->assertLink(t('Test link'));
    // Assert by the href/destination of the link.
    $this->assertLinkByHref(url('user', array('absolute' => TRUE)));
    // You can click links.
    $this->clickLink(t('Test link'));
    // Your context should then shift to that page.
    $this->assertEqual($this->getUrl(), url('user', array('absolute' => TRUE)), 'Redirected to user page.');

    // Fields.
    $this->drupalGet('test_demo_access/yes');
    // Assert a form field by name attribute.
    $this->assertFieldByName('test_form_element', 123);
    // Assert the same field with an xpath query.
    $this->assertFieldByXpath('//input[@id="edit-test-form-element"]', 123);

    // 'no' should return access denied.
    $this->drupalGet('test_demo_access/no');
    $this->assertResponse(403);

    // Using an invalid/random argument should default to access denied.
    $this->drupalGet('test_demo_access/' . $this->randomString());
    $this->assertResponse(403);

    // Test posting an invalid form.
    // Edit is essentially an array of keys => values to mimic what will be found
    // in the $_POST variable.
    $edit = array(
      'test_form_element' => '',
    );
    // The 3rd argument is the label for the button you want to use to submit
    // the form.
    $this->drupalPost('test_demo_access/yes', $edit, t('Save form'));
    $this->assertText(t('Test value field is required.'), 'Form error text found.');

    // Test posting a valid form.
    // Use random names/strings instead of hard coding test strings.
    $random_name = $this->randomName();
    $edit = array(
      'test_form_element' => $random_name,
    );
    $this->drupalPost('test_demo_access/yes', $edit, t('Save form'));
    // Running only through format_string() and not t(), as the code we're testing
    // uses format_string().
    $this->assertText(format_string('Test value is @value.', array('@value' => $random_name)), 'Confirmation message found.');
    // Assert that the form has redirected us to the user page.
    $this->assertEqual($this->getUrl(), url('user', array('absolute' => TRUE)), 'Redirected to user page.');
  }

  /**
   * Tests user login and visiting authenticated pages.
   */
  public function testUserLogin() {
    // Pass in an array of permissions this user should have.
    $this->someUser = $this->drupalCreateUser(array('bypass node access'));
    $this->drupalLogin($this->someUser);

    $this->drupalGet('node/add/page');
    $this->assertResponse(200);
  }

}
